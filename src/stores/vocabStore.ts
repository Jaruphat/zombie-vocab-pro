import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import type { VocabStore, VocabWord, WordSet } from '../types';

// Sample word sets
const sampleWordSets: WordSet[] = [
  {
    id: 'basic-survival',
    name: '‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏≠‡∏î',
    description: '‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏£‡∏≠‡∏î',
    color: '#10B981',
    icon: 'üõ°Ô∏è',
    words: [
      { id: '1', word: 'zombie', meaning: '‡∏ã‡∏≠‡∏°‡∏ö‡∏µ‡πâ', difficulty: 1 },
      { id: '2', word: 'survive', meaning: '‡πÄ‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏£‡∏≠‡∏î', difficulty: 2 },
      { id: '3', word: 'defend', meaning: '‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô', difficulty: 2 },
      { id: '4', word: 'escape', meaning: '‡∏´‡∏•‡∏ö‡∏´‡∏ô‡∏µ', difficulty: 1 },
      { id: '5', word: 'danger', meaning: '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢', difficulty: 1 },
      { id: '6', word: 'safe', meaning: '‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢', difficulty: 1 },
      { id: '7', word: 'weapon', meaning: '‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò', difficulty: 2 },
      { id: '8', word: 'attack', meaning: '‡πÇ‡∏à‡∏°‡∏ï‡∏µ', difficulty: 2 },
      { id: '9', word: 'health', meaning: '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', difficulty: 2 },
      { id: '10', word: 'strength', meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á', difficulty: 3 }
    ]
  },
  {
    id: 'technology',
    name: '‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ',
    description: '‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå',
    color: '#3B82F6',
    icon: 'üíª',
    words: [
      { id: '11', word: 'computer', meaning: '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', difficulty: 1 },
      { id: '12', word: 'keyboard', meaning: '‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå', difficulty: 2 },
      { id: '13', word: 'internet', meaning: '‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï', difficulty: 2 },
      { id: '14', word: 'software', meaning: '‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå', difficulty: 2 },
      { id: '15', word: 'hardware', meaning: '‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå', difficulty: 2 },
      { id: '16', word: 'download', meaning: '‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î', difficulty: 2 },
      { id: '17', word: 'upload', meaning: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î', difficulty: 2 },
      { id: '18', word: 'database', meaning: '‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', difficulty: 3 },
      { id: '19', word: 'program', meaning: '‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°', difficulty: 2 },
      { id: '20', word: 'network', meaning: '‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢', difficulty: 3 }
    ]
  },
  {
    id: 'daily-life',
    name: '‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 3: ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
    description: '‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
    color: '#F59E0B',
    icon: 'üè†',
    words: [
      { id: '21', word: 'house', meaning: '‡∏ö‡πâ‡∏≤‡∏ô', difficulty: 1 },
      { id: '22', word: 'family', meaning: '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß', difficulty: 1 },
      { id: '23', word: 'food', meaning: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£', difficulty: 1 },
      { id: '24', word: 'water', meaning: '‡∏ô‡πâ‡∏≥', difficulty: 1 },
      { id: '25', word: 'sleep', meaning: '‡∏ô‡∏≠‡∏ô', difficulty: 1 },
      { id: '26', word: 'work', meaning: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', difficulty: 1 },
      { id: '27', word: 'study', meaning: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', difficulty: 1 },
      { id: '28', word: 'friend', meaning: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô', difficulty: 1 },
      { id: '29', word: 'school', meaning: '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', difficulty: 1 },
      { id: '30', word: 'teacher', meaning: '‡∏Ñ‡∏£‡∏π', difficulty: 1 }
    ]
  },
  {
    id: 'advanced',
    name: '‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 4: ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
    description: '‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
    color: '#8B5CF6',
    icon: 'üéì',
    words: [
      { id: '31', word: 'philosophy', meaning: '‡∏õ‡∏£‡∏±‡∏ä‡∏ç‡∏≤', difficulty: 4 },
      { id: '32', word: 'psychology', meaning: '‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤', difficulty: 4 },
      { id: '33', word: 'strategy', meaning: '‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå', difficulty: 3 },
      { id: '34', word: 'vocabulary', meaning: '‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå', difficulty: 3 },
      { id: '35', word: 'environment', meaning: '‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°', difficulty: 3 },
      { id: '36', word: 'development', meaning: '‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤', difficulty: 3 },
      { id: '37', word: 'opportunity', meaning: '‡πÇ‡∏≠‡∏Å‡∏≤‡∏™', difficulty: 3 },
      { id: '38', word: 'responsibility', meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö', difficulty: 4 },
      { id: '39', word: 'achievement', meaning: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', difficulty: 3 },
      { id: '40', word: 'experience', meaning: '‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå', difficulty: 3 }
    ]
  }
];

// Keep some sample words for backward compatibility
const sampleWords: VocabWord[] = sampleWordSets[0].words;

export const useVocabStore = create<VocabStore>()(
  persist(
    (set, get) => ({
      // Initial state
      words: sampleWords,
      customWords: [],
      wordSets: sampleWordSets,
      selectedWordSets: ['basic-survival'], // Default to first set
      currentWordIndex: 0,

      // Actions
      addWord: (word) => set((state) => ({
        customWords: [...state.customWords, { ...word, id: crypto.randomUUID() }]
      })),

      removeWord: (id) => set((state) => ({
        words: state.words.filter(w => w.id !== id),
        customWords: state.customWords.filter(w => w.id !== id)
      })),

      updateWord: (id, updates) => set((state) => ({
        words: state.words.map(w => w.id === id ? { ...w, ...updates } : w),
        customWords: state.customWords.map(w => w.id === id ? { ...w, ...updates } : w)
      })),

      setWords: (words) => set({ words }),

      getRandomWord: () => {
        const state = get();
        const activeWords = state.getActiveWords();
        if (activeWords.length === 0) return null;
        return activeWords[Math.floor(Math.random() * activeWords.length)];
      },

      importWords: (words) => set((state) => ({
        customWords: [
          ...state.customWords,
          ...words.map(w => ({ ...w, id: crypto.randomUUID() }))
        ]
      })),

      exportWords: () => {
        const state = get();
        return [...state.words, ...state.customWords];
      },

      // Word Sets methods
      addWordSet: (wordSet) => set((state) => ({
        wordSets: [...state.wordSets, { ...wordSet, id: crypto.randomUUID() }]
      })),

      removeWordSet: (id) => set((state) => ({
        wordSets: state.wordSets.filter(s => s.id !== id),
        selectedWordSets: state.selectedWordSets.filter(setId => setId !== id)
      })),

      updateWordSet: (id, updates) => set((state) => ({
        wordSets: state.wordSets.map(s => s.id === id ? { ...s, ...updates } : s)
      })),

      setSelectedWordSets: (setIds) => set({ selectedWordSets: setIds }),

      getActiveWords: () => {
        const state = get();
        if (state.selectedWordSets.length === 0) {
          // Fallback to all words if no sets selected
          return [...state.words, ...state.customWords];
        }
        
        const activeWords: VocabWord[] = [];
        state.selectedWordSets.forEach(setId => {
          const wordSet = state.wordSets.find(s => s.id === setId);
          if (wordSet) {
            activeWords.push(...wordSet.words);
          }
        });
        
        // Also include custom words
        activeWords.push(...state.customWords);
        
        return activeWords;
      },
    }),
    {
      name: 'zombie-vocab-words',
      partialize: (state) => ({
        customWords: state.customWords,
        selectedWordSets: state.selectedWordSets,
        currentWordIndex: state.currentWordIndex,
      }),
    }
  )
);